import telebot
import openpyxl
from telebot import types
import csv
from tabulate import tabulate
import pandas as pd

bot = telebot.TeleBot("6065379061:AAE1oFujbxtkeeVmP-OyGNo-1aAJMZ8_onA")


@bot.message_handler(commands=['start'])
def process_start_command(message: types.Message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!\n–ü–æ—Ä–∞–±–æ—Ç–∞–µ–º?ü§ì")


@bot.message_handler(commands=['help'])
def start(message):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    url_button1 = types.InlineKeyboardButton(text="–ñ–¥–∏—Ç–µ", callback_data='–ñ–¥–∏—Ç–µ')
    url_button2 = types.InlineKeyboardButton(text="–ì–∞—Ä–∞–Ω—Ç–∏—è", callback_data='–ì–∞—Ä–∞–Ω—Ç–∏—è')
    url_button3 = types.InlineKeyboardButton(text="–ù–∞–ª–∏—á–∏–µ", callback_data='–ù–∞–ª–∏—á–∏–µ')
    url_button4 = types.InlineKeyboardButton(text="–ù–µ –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data='–ù–µ –≤ –Ω–∞–ª–∏—á–∏–∏')
    url_button5 = types.InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–Ω", callback_data='–ü—Ä–æ–¥–∞–Ω')
    url_button6 = types.InlineKeyboardButton(text="–¢–æ—Ä–≥", callback_data='–¢–æ—Ä–≥')
    url_button7 = types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞", callback_data='–û–ø–ª–∞—Ç–∞')
    url_button8 = types.InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞", callback_data='–î–æ—Å—Ç–∞–≤–∫–∞')
    url_button9 = types.InlineKeyboardButton(text="–ê–≤–∏—Ç–æ-–¥–æ—Å—Ç–∞–≤–∫–∞", callback_data='–ê–≤–∏—Ç–æ-–¥–æ—Å—Ç–∞–≤–∫–∞')
    url_button10 = types.InlineKeyboardButton(text="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ", callback_data='–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ')
    url_button11 = types.InlineKeyboardButton(text="–°–î–≠–ö", callback_data='–°–î–≠–ö')
    url_button12 = types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑ –ò–∂", callback_data='–ó–∞–∫–∞–∑ –ò–∂')
    url_button13 = types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑", callback_data='–ó–∞–∫–∞–∑')
    url_button14 = types.InlineKeyboardButton(text="–ö—Ä–µ–¥–∏—Ç", callback_data='–ö—Ä–µ–¥–∏—Ç')
    url_button15 = types.InlineKeyboardButton(text="–î–∏–º–∞", callback_data='–î–∏–º–∞')
    url_button16 = types.InlineKeyboardButton(text="–ó–∞–ª–∞ –Ω–µ—Ç", callback_data='–ó–∞–ª–∞ –Ω–µ—Ç')
    url_button17 = types.InlineKeyboardButton(text="–û—Ä–∏–≥–∏–Ω–∞–ª", callback_data='–û—Ä–∏–≥–∏–Ω–∞–ª')
    url_button18 = types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤", callback_data='–û—Ç–∑—ã–≤')
    url_button19 = types.InlineKeyboardButton(text="–í—ã–∫—É–ø", callback_data='–í—ã–∫—É–ø')
    url_button20 = types.InlineKeyboardButton(text="–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", callback_data='–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    keyboard.add(url_button1, url_button2, url_button3, url_button4, url_button5, url_button6, url_button7, url_button8,
                 url_button9, url_button10, url_button11, url_button12, url_button13, url_button14, url_button15,
                 url_button16, url_button17, url_button18, url_button19, url_button20)
    bot.send_message(message.chat.id, '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã:', reply_markup=keyboard, parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    book = openpyxl.open('Answer.xlsx', read_only=True)
    sheet = book.active
    cells = sheet['A1':'B24']
    if call.data == '–ñ–¥–∏—Ç–µ':
        bot.send_message(call.message.chat.id, cells[0][1].value)
    if call.data == '–ì–∞—Ä–∞–Ω—Ç–∏—è':
        bot.send_message(call.message.chat.id, cells[1][1].value)
    if call.data == '–ù–∞–ª–∏—á–∏–µ':
        bot.send_message(call.message.chat.id, cells[2][1].value)
    if call.data == '–ù–µ –≤ –Ω–∞–ª–∏—á–∏–∏':
        bot.send_message(call.message.chat.id, cells[3][1].value)
    if call.data == '–ü—Ä–æ–¥–∞–Ω':
        bot.send_message(call.message.chat.id, cells[4][1].value)
    if call.data == '–¢–æ—Ä–≥':
        bot.send_message(call.message.chat.id, cells[5][1].value)
    if call.data == '–û–ø–ª–∞—Ç–∞':
        bot.send_message(call.message.chat.id, cells[6][1].value)
    if call.data == '–î–æ—Å—Ç–∞–≤–∫–∞':
        bot.send_message(call.message.chat.id, cells[7][1].value)
    if call.data == '–ê–≤–∏—Ç–æ-–¥–æ—Å—Ç–∞–≤–∫–∞':
        bot.send_message(call.message.chat.id, cells[8][1].value)
    if call.data == '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ':
        bot.send_message(call.message.chat.id, cells[9][1].value)
    if call.data == '–°–î–≠–ö':
        bot.send_message(call.message.chat.id, cells[10][1].value)
    if call.data == '–ó–∞–∫–∞–∑ –ò–∂':
        bot.send_message(call.message.chat.id, cells[11][1].value)
    if call.data == '–ó–∞–∫–∞–∑':
        bot.send_message(call.message.chat.id, cells[12][1].value)
    if call.data == '–ö—Ä–µ–¥–∏—Ç':
        bot.send_message(call.message.chat.id, cells[13][1].value)
    if call.data == '–î–∏–º–∞':
        bot.send_message(call.message.chat.id, cells[14][1].value)
    if call.data == '–ó–∞–ª–∞ –Ω–µ—Ç':
        bot.send_message(call.message.chat.id, cells[15][1].value)
    if call.data == '–û—Ä–∏–≥–∏–Ω–∞–ª':
        bot.send_message(call.message.chat.id, cells[16][1].value)
    if call.data == '–û—Ç–∑—ã–≤':
        bot.send_message(call.message.chat.id, cells[17][1].value)
    if call.data == '–í—ã–∫—É–ø':
        bot.send_message(call.message.chat.id, cells[18][1].value)
    if call.data == '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(call.message.chat.id, cells[19][1].value)


@bot.message_handler(content_types=["text"])
def price_list(message):
    if message.text.startswith('.') or message.text.startswith('. '):
        productname = []
        with open("!Forclients.csv", encoding='utf-8') as my_file:
            file_reader = csv.reader(my_file, delimiter=';')
            for row in file_reader:
                if message.text.lower()[1:].strip() in row[0].lower().rstrip():
                    productname.append(row)
        productname.sort(key=lambda t: int(t[1]))
        for i in productname:
            bot.send_message(message.chat.id, f'<b>{i[0]}</b>: {i[1]} —Ä.', parse_mode='html')
        if len(productname) == 0:
            bot.send_message(message.chat.id,
                             '–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ ü§î –∏–ª–∏ –í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥ –∏—Å–∫–æ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ 1-2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–∫–∞–∫ –Ω–∞ –∞–≤–∏—Ç–æ!)',
                             parse_mode='html')
        bot.send_message(message.chat.id, f'‚úÖ–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(productname)}', parse_mode='html')
    else:
        productname = []
        article = []
        count = 0
        with open("!Name.csv", encoding='utf-8') as r_file:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª name
            file_reader = csv.reader(r_file)  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            for row in file_reader:
                if message.text.lower().rstrip() in row[0].lower().rstrip():
                    result = [i for i in row if i != ''][1:]
                    article.append(result)
                    productname.append(row[0])
                    count += 1
                    if len(productname) >= 20:
                        bot.send_message(message.chat.id, '–¢–æ–≤–∞—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –í—ã–≤–æ–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ ...', parse_mode='html')
                        break
            if productname == []:
                bot.send_message(message.chat.id, '–•–º.. –ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞ ü§î', parse_mode='html')
        for num in range(len(productname)):
            with open("!BD.csv", encoding='utf-8') as t_file:
                file_reader = csv.reader(t_file)
                lst = [['----', '-----', '---', '-----', '-----']]
                for row in file_reader:
                    for i in article[num]:
                        if i == row[1]:
                            lst.append([row[0] + ':', row[1], row[3], row[4], row[5]])

            df = pd.DataFrame(lst, columns=['', '–∞—Ä—Ç', '–Ω–∞–ª', '–æ–ø—Ç', '—Ä—Ä—Ü'])
            df = df.to_string(index=False)

            if len(df) > 53:  # —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –ø—É—Å—Ç—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–∞–π—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                bot.send_message(message.chat.id, f'<b>{productname[num]}</b>' + '\n\n' + f'<pre>{df}</pre>',
                                 parse_mode='html')  # –í—ã–≤–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–≤—É–º—è –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –∏ –¥–∞—Ç–∞ —Ñ—Ä–µ–π–º
            else:
                count -= 1
        keyboard = types.InlineKeyboardMarkup(row_width=5)
        url_button1 = types.InlineKeyboardButton(text="Trade", url="https://attrade.ru/catalog/")
        url_button2 = types.InlineKeyboardButton(text="Invask", url="https://invask.ru/partner/catalog/")
        url_button3 = types.InlineKeyboardButton(text="Slami", url="https://dealer.slami.ru/")
        url_button4 = types.InlineKeyboardButton(text="United", url="https://united-music.ru/ru/")
        keyboard.add(url_button1, url_button2, url_button3, url_button4)
        bot.send_message(message.chat.id, '‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ' + f'<b>{count}</b>', reply_markup=keyboard,
                         parse_mode='html')


while True:
    try:
        bot.polling(none_stop=True)
    except:
        continue
